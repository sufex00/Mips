// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/24/2016 17:49:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          dmem
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dmem_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] a;
reg clk;
reg [31:0] wd;
reg we;
// wires                                               
wire [31:0] rd;

// assign statements (if any)                          
dmem i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.clk(clk),
	.rd(rd),
	.wd(wd),
	.we(we)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// wd[ 31 ]
initial
begin
	wd[31] = 1'b1;
end 
// wd[ 30 ]
initial
begin
	wd[30] = 1'b0;
end 
// wd[ 29 ]
initial
begin
	wd[29] = 1'b0;
end 
// wd[ 28 ]
initial
begin
	wd[28] = 1'b1;
end 
// wd[ 27 ]
initial
begin
	wd[27] = 1'b1;
end 
// wd[ 26 ]
initial
begin
	wd[26] = 1'b0;
end 
// wd[ 25 ]
initial
begin
	wd[25] = 1'b0;
end 
// wd[ 24 ]
initial
begin
	wd[24] = 1'b1;
end 
// wd[ 23 ]
initial
begin
	wd[23] = 1'b1;
end 
// wd[ 22 ]
initial
begin
	wd[22] = 1'b0;
end 
// wd[ 21 ]
initial
begin
	wd[21] = 1'b1;
end 
// wd[ 20 ]
initial
begin
	wd[20] = 1'b0;
end 
// wd[ 19 ]
initial
begin
	wd[19] = 1'b0;
end 
// wd[ 18 ]
initial
begin
	wd[18] = 1'b1;
end 
// wd[ 17 ]
initial
begin
	wd[17] = 1'b1;
end 
// wd[ 16 ]
initial
begin
	wd[16] = 1'b1;
end 
// wd[ 15 ]
initial
begin
	wd[15] = 1'b0;
end 
// wd[ 14 ]
initial
begin
	wd[14] = 1'b0;
end 
// wd[ 13 ]
initial
begin
	wd[13] = 1'b0;
end 
// wd[ 12 ]
initial
begin
	wd[12] = 1'b0;
end 
// wd[ 11 ]
initial
begin
	wd[11] = 1'b1;
end 
// wd[ 10 ]
initial
begin
	wd[10] = 1'b1;
end 
// wd[ 9 ]
initial
begin
	wd[9] = 1'b1;
end 
// wd[ 8 ]
initial
begin
	wd[8] = 1'b0;
	wd[8] = #630000 1'b1;
end 
// wd[ 7 ]
initial
begin
	wd[7] = 1'b1;
	wd[7] = #630000 1'b0;
end 
// wd[ 6 ]
initial
begin
	wd[6] = 1'b1;
	wd[6] = #630000 1'b0;
end 
// wd[ 5 ]
initial
begin
	wd[5] = 1'b0;
	wd[5] = #310000 1'b1;
	wd[5] = #320000 1'b0;
	wd[5] = #320000 1'b1;
end 
// wd[ 4 ]
initial
begin
	wd[4] = 1'b0;
	# 150000;
	repeat(2)
	begin
		wd[4] = 1'b1;
		wd[4] = #160000 1'b0;
		# 160000;
	end
	wd[4] = 1'b1;
	wd[4] = #160000 1'b0;
end 
// wd[ 3 ]
initial
begin
	wd[3] = 1'b0;
	# 70000;
	repeat(5)
	begin
		wd[3] = 1'b1;
		wd[3] = #80000 1'b0;
		# 80000;
	end
	wd[3] = 1'b1;
	wd[3] = #80000 1'b0;
end 
// wd[ 2 ]
initial
begin
	wd[2] = 1'b0;
	# 30000;
	repeat(12)
	begin
		wd[2] = 1'b1;
		wd[2] = #40000 1'b0;
		# 40000;
	end
	wd[2] = 1'b1;
end 
// wd[ 1 ]
initial
begin
	wd[1] = 1'b0;
	# 10000;
	repeat(24)
	begin
		wd[1] = 1'b1;
		wd[1] = #20000 1'b0;
		# 20000;
	end
	wd[1] = 1'b1;
	wd[1] = #20000 1'b0;
end 
// wd[ 0 ]
always
begin
	wd[0] = 1'b1;
	wd[0] = #10000 1'b0;
	#10000;
end 

// we
initial
begin
	we = 1'b1;
	we = #380000 1'b0;
end 
// a[ 31 ]
initial
begin
	a[31] = 1'b0;
end 
// a[ 30 ]
initial
begin
	a[30] = 1'b0;
end 
// a[ 29 ]
initial
begin
	a[29] = 1'b0;
end 
// a[ 28 ]
initial
begin
	a[28] = 1'b0;
end 
// a[ 27 ]
initial
begin
	a[27] = 1'b0;
end 
// a[ 26 ]
initial
begin
	a[26] = 1'b0;
end 
// a[ 25 ]
initial
begin
	a[25] = 1'b0;
end 
// a[ 24 ]
initial
begin
	a[24] = 1'b0;
end 
// a[ 23 ]
initial
begin
	a[23] = 1'b0;
end 
// a[ 22 ]
initial
begin
	a[22] = 1'b0;
end 
// a[ 21 ]
initial
begin
	a[21] = 1'b0;
end 
// a[ 20 ]
initial
begin
	a[20] = 1'b0;
end 
// a[ 19 ]
initial
begin
	a[19] = 1'b0;
end 
// a[ 18 ]
initial
begin
	a[18] = 1'b0;
end 
// a[ 17 ]
initial
begin
	a[17] = 1'b0;
end 
// a[ 16 ]
initial
begin
	a[16] = 1'b0;
end 
// a[ 15 ]
initial
begin
	a[15] = 1'b0;
end 
// a[ 14 ]
initial
begin
	a[14] = 1'b0;
end 
// a[ 13 ]
initial
begin
	a[13] = 1'b0;
end 
// a[ 12 ]
initial
begin
	a[12] = 1'b0;
end 
// a[ 11 ]
initial
begin
	a[11] = 1'b0;
end 
// a[ 10 ]
initial
begin
	a[10] = 1'b0;
end 
// a[ 9 ]
initial
begin
	a[9] = 1'b0;
end 
// a[ 8 ]
initial
begin
	a[8] = 1'b0;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
	a[5] = #320000 1'b1;
	a[5] = #60000 1'b0;
	a[5] = #320000 1'b1;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
	a[4] = #160000 1'b1;
	a[4] = #160000 1'b0;
	a[4] = #220000 1'b1;
	a[4] = #160000 1'b0;
	a[4] = #160000 1'b1;
end 
// a[ 3 ]
initial
begin
	repeat(2)
	begin
		a[3] = 1'b0;
		a[3] = #80000 1'b1;
		# 80000;
	end
	a[3] = 1'b0;
	a[3] = #140000 1'b1;
	# 80000;
	repeat(2)
	begin
		a[3] = 1'b0;
		a[3] = #80000 1'b1;
		# 80000;
	end
	a[3] = 1'b0;
	a[3] = #80000 1'b1;
end 
// a[ 2 ]
initial
begin
	repeat(4)
	begin
		a[2] = 1'b0;
		a[2] = #40000 1'b1;
		# 40000;
	end
	a[2] = 1'b0;
	a[2] = #40000 1'b1;
	# 20000;
	repeat(7)
	begin
		a[2] = 1'b0;
		a[2] = #40000 1'b1;
		# 40000;
	end
	a[2] = 1'b0;
	a[2] = #40000 1'b1;
end 
// a[ 1 ]
initial
begin
	repeat(9)
	begin
		a[1] = 1'b0;
		a[1] = #20000 1'b1;
		# 20000;
	end
	a[1] = 1'b0;
	a[1] = #40000 1'b1;
	# 20000;
	repeat(14)
	begin
		a[1] = 1'b0;
		a[1] = #20000 1'b1;
		# 20000;
	end
	a[1] = 1'b0;
end 
// a[ 0 ]
initial
begin
	repeat(19)
	begin
		a[0] = 1'b0;
		a[0] = #10000 1'b1;
		# 10000;
	end
	repeat(31)
	begin
		a[0] = 1'b0;
		a[0] = #10000 1'b1;
		# 10000;
	end
end 
endmodule

