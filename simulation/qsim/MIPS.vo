// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Lite Edition"

// DATE "11/23/2016 23:24:33"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module maindec (
	op,
	memtorreg,
	memwrite,
	branch,
	alusrc,
	regdst,
	regwrite,
	aluop);
input 	[5:0] op;
output 	memtorreg;
output 	memwrite;
output 	branch;
output 	alusrc;
output 	regdst;
output 	regwrite;
output 	[1:0] aluop;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \memtorreg~output_o ;
wire \memwrite~output_o ;
wire \branch~output_o ;
wire \alusrc~output_o ;
wire \regdst~output_o ;
wire \regwrite~output_o ;
wire \aluop[0]~output_o ;
wire \aluop[1]~output_o ;
wire \op[0]~input_o ;
wire \op[1]~input_o ;
wire \op[3]~input_o ;
wire \op[5]~input_o ;
wire \op[2]~input_o ;
wire \op[4]~input_o ;
wire \WideOr6~0_combout ;
wire \Decoder0~0_combout ;
wire \WideOr4~0_combout ;
wire \Decoder0~1_combout ;
wire \WideOr1~0_combout ;


cyclonev_io_obuf \memtorreg~output (
	.i(gnd),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\memtorreg~output_o ),
	.obar());
// synopsys translate_off
defparam \memtorreg~output .bus_hold = "false";
defparam \memtorreg~output .open_drain_output = "false";
defparam \memtorreg~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \memwrite~output (
	.i(!\WideOr6~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\memwrite~output_o ),
	.obar());
// synopsys translate_off
defparam \memwrite~output .bus_hold = "false";
defparam \memwrite~output .open_drain_output = "false";
defparam \memwrite~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \branch~output (
	.i(\Decoder0~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\branch~output_o ),
	.obar());
// synopsys translate_off
defparam \branch~output .bus_hold = "false";
defparam \branch~output .open_drain_output = "false";
defparam \branch~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \alusrc~output (
	.i(\WideOr4~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\alusrc~output_o ),
	.obar());
// synopsys translate_off
defparam \alusrc~output .bus_hold = "false";
defparam \alusrc~output .open_drain_output = "false";
defparam \alusrc~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \regdst~output (
	.i(\Decoder0~1_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\regdst~output_o ),
	.obar());
// synopsys translate_off
defparam \regdst~output .bus_hold = "false";
defparam \regdst~output .open_drain_output = "false";
defparam \regdst~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \regwrite~output (
	.i(!\WideOr1~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\regwrite~output_o ),
	.obar());
// synopsys translate_off
defparam \regwrite~output .bus_hold = "false";
defparam \regwrite~output .open_drain_output = "false";
defparam \regwrite~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \aluop[0]~output (
	.i(\Decoder0~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\aluop[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \aluop[0]~output .bus_hold = "false";
defparam \aluop[0]~output .open_drain_output = "false";
defparam \aluop[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \aluop[1]~output (
	.i(\Decoder0~1_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\aluop[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \aluop[1]~output .bus_hold = "false";
defparam \aluop[1]~output .open_drain_output = "false";
defparam \aluop[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \op[0]~input (
	.i(op[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\op[0]~input_o ));
// synopsys translate_off
defparam \op[0]~input .bus_hold = "false";
defparam \op[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \op[1]~input (
	.i(op[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\op[1]~input_o ));
// synopsys translate_off
defparam \op[1]~input .bus_hold = "false";
defparam \op[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \op[3]~input (
	.i(op[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\op[3]~input_o ));
// synopsys translate_off
defparam \op[3]~input .bus_hold = "false";
defparam \op[3]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \op[5]~input (
	.i(op[5]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\op[5]~input_o ));
// synopsys translate_off
defparam \op[5]~input .bus_hold = "false";
defparam \op[5]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \op[2]~input (
	.i(op[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\op[2]~input_o ));
// synopsys translate_off
defparam \op[2]~input .bus_hold = "false";
defparam \op[2]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \op[4]~input (
	.i(op[4]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\op[4]~input_o ));
// synopsys translate_off
defparam \op[4]~input .bus_hold = "false";
defparam \op[4]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \WideOr6~0 (
// Equation(s):
// \WideOr6~0_combout  = ( \op[2]~input_o  & ( !\op[4]~input_o  & ( (!\op[0]~input_o  & (!\op[1]~input_o  & (!\op[3]~input_o  & !\op[5]~input_o ))) ) ) ) # ( !\op[2]~input_o  & ( !\op[4]~input_o  & ( (!\op[1]~input_o  & (!\op[0]~input_o  & ((!\op[5]~input_o 
// )))) # (\op[1]~input_o  & (!\op[3]~input_o  & (!\op[0]~input_o  $ (\op[5]~input_o )))) ) ) )

	.dataa(!\op[0]~input_o ),
	.datab(!\op[1]~input_o ),
	.datac(!\op[3]~input_o ),
	.datad(!\op[5]~input_o ),
	.datae(!\op[2]~input_o ),
	.dataf(!\op[4]~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\WideOr6~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \WideOr6~0 .extended_lut = "off";
defparam \WideOr6~0 .lut_mask = 64'hA810800000000000;
defparam \WideOr6~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \Decoder0~0 (
// Equation(s):
// \Decoder0~0_combout  = ( \op[2]~input_o  & ( !\op[4]~input_o  & ( (!\op[0]~input_o  & (!\op[1]~input_o  & (!\op[3]~input_o  & !\op[5]~input_o ))) ) ) )

	.dataa(!\op[0]~input_o ),
	.datab(!\op[1]~input_o ),
	.datac(!\op[3]~input_o ),
	.datad(!\op[5]~input_o ),
	.datae(!\op[2]~input_o ),
	.dataf(!\op[4]~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\Decoder0~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \Decoder0~0 .extended_lut = "off";
defparam \Decoder0~0 .lut_mask = 64'h0000800000000000;
defparam \Decoder0~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \WideOr4~0 (
// Equation(s):
// \WideOr4~0_combout  = ( \op[4]~input_o  & ( \op[5]~input_o  ) ) # ( !\op[4]~input_o  & ( \op[5]~input_o  ) ) # ( \op[4]~input_o  & ( !\op[5]~input_o  ) ) # ( !\op[4]~input_o  & ( !\op[5]~input_o  & ( (((\op[2]~input_o  & \op[1]~input_o )) # 
// (\op[0]~input_o )) # (\op[3]~input_o ) ) ) )

	.dataa(!\op[3]~input_o ),
	.datab(!\op[2]~input_o ),
	.datac(!\op[1]~input_o ),
	.datad(!\op[0]~input_o ),
	.datae(!\op[4]~input_o ),
	.dataf(!\op[5]~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\WideOr4~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \WideOr4~0 .extended_lut = "off";
defparam \WideOr4~0 .lut_mask = 64'h57FFFFFFFFFFFFFF;
defparam \WideOr4~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \Decoder0~1 (
// Equation(s):
// \Decoder0~1_combout  = ( !\op[2]~input_o  & ( !\op[4]~input_o  & ( (!\op[0]~input_o  & (!\op[1]~input_o  & (!\op[3]~input_o  & !\op[5]~input_o ))) ) ) )

	.dataa(!\op[0]~input_o ),
	.datab(!\op[1]~input_o ),
	.datac(!\op[3]~input_o ),
	.datad(!\op[5]~input_o ),
	.datae(!\op[2]~input_o ),
	.dataf(!\op[4]~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\Decoder0~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \Decoder0~1 .extended_lut = "off";
defparam \Decoder0~1 .lut_mask = 64'h8000000000000000;
defparam \Decoder0~1 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \WideOr1~0 (
// Equation(s):
// \WideOr1~0_combout  = ( \op[4]~input_o  & ( \op[2]~input_o  ) ) # ( !\op[4]~input_o  & ( \op[2]~input_o  ) ) # ( \op[4]~input_o  & ( !\op[2]~input_o  ) ) # ( !\op[4]~input_o  & ( !\op[2]~input_o  & ( (!\op[5]~input_o  & (((\op[0]~input_o ) # 
// (\op[1]~input_o )))) # (\op[5]~input_o  & (((!\op[1]~input_o ) # (!\op[0]~input_o )) # (\op[3]~input_o ))) ) ) )

	.dataa(!\op[3]~input_o ),
	.datab(!\op[5]~input_o ),
	.datac(!\op[1]~input_o ),
	.datad(!\op[0]~input_o ),
	.datae(!\op[4]~input_o ),
	.dataf(!\op[2]~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\WideOr1~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \WideOr1~0 .extended_lut = "off";
defparam \WideOr1~0 .lut_mask = 64'h3FFDFFFFFFFFFFFF;
defparam \WideOr1~0 .shared_arith = "off";
// synopsys translate_on

assign memtorreg = \memtorreg~output_o ;

assign memwrite = \memwrite~output_o ;

assign branch = \branch~output_o ;

assign alusrc = \alusrc~output_o ;

assign regdst = \regdst~output_o ;

assign regwrite = \regwrite~output_o ;

assign aluop[0] = \aluop[0]~output_o ;

assign aluop[1] = \aluop[1]~output_o ;

endmodule
